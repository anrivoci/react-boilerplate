/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const LoginLoginLazyImport = createFileRoute('/_login/login')()
const AuthenticatedServicesLazyImport = createFileRoute(
  '/_authenticated/services',
)()
const AuthenticatedDashboardLazyImport = createFileRoute(
  '/_authenticated/dashboard',
)()

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginLoginLazyRoute = LoginLoginLazyImport.update({
  id: '/_login/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_login/login.lazy').then((d) => d.Route))

const AuthenticatedServicesLazyRoute = AuthenticatedServicesLazyImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/services.lazy').then((d) => d.Route),
)

const AuthenticatedDashboardLazyRoute = AuthenticatedDashboardLazyImport.update(
  {
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
).lazy(() =>
  import('./routes/_authenticated/dashboard.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/services': {
      id: '/_authenticated/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof AuthenticatedServicesLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_login/login': {
      id: '/_login/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLoginLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardLazyRoute: typeof AuthenticatedDashboardLazyRoute
  AuthenticatedServicesLazyRoute: typeof AuthenticatedServicesLazyRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardLazyRoute: AuthenticatedDashboardLazyRoute,
  AuthenticatedServicesLazyRoute: AuthenticatedServicesLazyRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardLazyRoute
  '/services': typeof AuthenticatedServicesLazyRoute
  '/login': typeof LoginLoginLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardLazyRoute
  '/services': typeof AuthenticatedServicesLazyRoute
  '/login': typeof LoginLoginLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardLazyRoute
  '/_authenticated/services': typeof AuthenticatedServicesLazyRoute
  '/_login/login': typeof LoginLoginLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/dashboard' | '/services' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/dashboard' | '/services' | '/login'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/dashboard'
    | '/_authenticated/services'
    | '/_login/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginLoginLazyRoute: typeof LoginLoginLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginLoginLazyRoute: LoginLoginLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/_login/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/dashboard",
        "/_authenticated/services"
      ]
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/services": {
      "filePath": "_authenticated/services.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_login/login": {
      "filePath": "_login/login.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
